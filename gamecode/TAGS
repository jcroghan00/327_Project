
character.h,425
#define GAMECODE_CHARACTER_H2,29
typedef struct dungeon dungeon_t;6,77
typedef struct pc pc_t;7,111
typedef struct monster monster_t;8,135
typedef struct character 11,171
    char display_char;12,198
    pair_t pos;13,221
    pc_t *pc;pc14,237
    monster_t *monster;monster15,251
    uint32_t turn;16,275
    uint32_t sd;17,294
    int living;18,311
    uint32_t speed;19,327
}character_t;character_t20,347

dim.h,154
# define DIMS_H2,15
typedef enum dim 9,197
    dim_x,10,216
    dim_y,11,227
    num_dims12,238
} dim_t;13,251
typedef int8_t pair_t[pair_t15,261

dungeon.c,1319
# define rand_under(10,209
# define rand_range(14,352
# define UNUSED(15,425
#define malloc(17,456
character_t *characters;characters23,595
static int32_t character_cmp(25,621
typedef struct corridor_path 34,928
  heap_node_t *hn;hn35,959
  uint8_t pos[pos36,978
  uint8_t from[from37,996
  int32_t cost;38,1015
} corridor_path_t;39,1031
static uint32_t adjacent_to_room(59,1484
static uint32_t is_open_space(67,1745
static int32_t corridor_path_cmp(72,1844
static void dijkstra_corridor(76,1994
static void dijkstra_corridor_inv(175,5731
#define hardnesspair_inv(228,7053
static int connect_two_rooms(278,9724
static int create_cycle(297,10376
static int connect_rooms(339,11941
int gaussian[gaussian352,12134
typedef struct queue_node 360,12290
  int x,361,12318
  int x, y;361,12318
  struct queue_node *next;next362,12330
} queue_node_t;363,12357
static int smooth_hardness(365,12374
static int empty_dungeon(519,16548
static int place_rooms(537,16923
static void place_stairs(574,18110
static int make_rooms(616,19180
int gen_dungeon(640,19742
int load_dungeon(654,19938
void render_dungeon(773,22595
void delete_dungeon(856,24863
void init_dungeon(862,24947
uint32_t calc_file_size(867,25004
int save_dungeon(873,25155
void move_pc(951,27180
int play_game(976,27902

dungeon.h,1818
# define DUNGEON_H2,18
#define DUNGEON_X 20,324
#define DUNGEON_Y 21,358
#define MIN_ROOMS 22,392
#define MAX_ROOMS 23,425
#define ROOM_MIN_X 24,459
#define ROOM_MIN_Y 25,492
#define ROOM_MAX_X 26,525
#define ROOM_MAX_Y 27,559
#define PC_SPEED 28,593
#define SEMANTIC_FILE_MARKER 29,627
#define SAVE_DIR 30,673
#define SAVE_FILE 31,714
#define FILE_VERSION 32,755
 typedef struct monster monster_t;34,789
 typedef struct pc pc_t;35,824
#define mappair(37,850
#define mapxy(38,907
#define hardnesspair(39,942
#define hardnessxy(40,1009
#define character_mappair(41,1054
#define character_mapxy(42,1131
typedef enum __attribute__ ((__packed__)) terrain_type 44,1187
  ter_debug,45,1244
  ter_wall,46,1257
  ter_wall_immutable,47,1269
  ter_floor,48,1291
  ter_floor_room,49,1304
  ter_floor_hall,50,1322
  ter_stairs,51,1340
  ter_stairs_up,52,1354
  ter_stairs_down53,1371
} terrain_type_t;54,1389
typedef struct room 56,1408
  pair_t position;57,1430
  pair_t size;58,1449
} room_t;59,1464
typedef struct stair{stair61,1475
  pair_t position;62,1497
  int up_down;64,1533
}stair_t;stair_t65,1548
typedef struct monster_path 67,1559
    heap_node_t *hn;hn68,1589
    uint8_t pos[pos69,1610
    int32_t cost;70,1630
} monster_path_t;71,1648
typedef struct dungeon 73,1667
  uint32_t num_rooms;74,1692
  room_t *rooms;rooms75,1714
  character_t **characters;characters76,1731
  stair_t stairs[stairs77,1759
  terrain_type_t map[map78,1782
  character_t *character_map[character_map79,1826
  uint8_t hardness[hardness88,2451
  uint16_t stairs_up;89,2493
  uint16_t stairs_down;90,2515
  character_t pc;91,2539
  int num_monsters;92,2557
  monster_path_t non_tun_path[non_tun_path93,2577
  monster_path_t tun_path[tun_path94,2630
} dungeon_t;95,2679

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

monster.c,161
int gen_monsters(13,125
void move_line(95,2940
void final_move(128,3941
void move_monster(145,4519
int bresenham_LOS(265,9004
void bresenham_move(300,9707

monster.h,303
# define MONSTER_H2,18
typedef struct monster 6,60
    int intelligent;13,483
    int telepath;20,917
    int tunneling;29,1505
    int erratic;35,1758
    pair_t pc_last_loc;36,1775
} monster_t;37,1799
typedef struct dif{dif39,1813
    int x;40,1833
    int y;41,1844
}dif_t;dif_t42,1855

path.c,106
static int32_t monster_path_cmp(5,58
void dijkstra_non_tunneling(9,207
void dijkstra_tunneling(67,1900

path.h,21
# define PATH_H2,15

pc.c,90
int is_pc_alive(9,28
void place_pc(13,87
void config_pc(26,632
int pc_next_pos(37,834

pc.h,99
# define PC_H2,13
typedef struct dungeon dungeon_t;4,28
typedef struct pc 7,64
}pc_t;pc_t8,84

rlg327.c,15
int main(3,22

game.c,0

character.c,0
