
dungeon.c,1610
# define rand_under(8,175
# define rand_range(12,318
# define UNUSED(13,391
#define malloc(15,422
typedef struct file_info 21,561
  char file_type[file_type22,588
  uint32_t version;23,610
  uint32_t file_size;24,630
  int load;25,652
  int save;26,664
  int ren_non_tun_dist_map;27,676
  int ren_tun_dist_map;28,704
} file_info_t;29,728
static int32_t character_cmp(32,745
typedef struct corridor_path 42,1053
  heap_node_t *hn;hn43,1084
  uint8_t pos[pos44,1103
  uint8_t from[from45,1121
  int32_t cost;46,1140
} corridor_path_t;47,1156
static uint32_t in_room(49,1176
static uint32_t adjacent_to_room(65,1567
static uint32_t is_open_space(73,1828
static int32_t corridor_path_cmp(78,1927
static void dijkstra_corridor(82,2077
static void dijkstra_corridor_inv(181,5814
#define hardnesspair_inv(234,7136
static int connect_two_rooms(284,9807
static int create_cycle(303,10459
static int connect_rooms(345,12024
int gaussian[gaussian358,12217
typedef struct queue_node 366,12373
  int x,367,12401
  int x, y;367,12401
  struct queue_node *next;next368,12413
} queue_node_t;369,12440
static int smooth_hardness(371,12457
static int empty_dungeon(525,16631
static int place_rooms(544,17007
static void place_stairs(581,18194
static int make_rooms(623,19264
static void place_pc(646,19825
int gen_monsters(673,20835
int gen_dungeon(731,23004
int load_dungeon(747,23253
void render_dungeon(868,26052
void delete_dungeon(949,28325
void init_dungeon(955,28409
int save_dungeon(965,28619
void move_pc(1041,30615
int play_game(1073,31860
int main(1121,33009

dungeon.h,2134
# define DUNGEON_H2,18
 typedef struct monster monster_t;16,282
 typedef struct pc 18,318
}pc_t;pc_t19,339
typedef enum dim 21,347
  dim_x,22,366
  dim_y,23,375
  num_dims24,384
} dim_t;25,395
typedef int16_t pair_t[pair_t27,405
#define DUNGEON_X 29,440
#define DUNGEON_Y 30,474
#define MIN_ROOMS 31,508
#define MAX_ROOMS 32,541
#define ROOM_MIN_X 33,575
#define ROOM_MIN_Y 34,608
#define ROOM_MAX_X 35,641
#define ROOM_MAX_Y 36,675
#define mappair(38,710
#define mapxy(39,767
#define hardnesspair(40,802
#define hardnessxy(41,869
#define character_mappair(42,914
#define character_mapxy(43,991
typedef enum __attribute__ ((__packed__)) terrain_type 45,1047
  ter_debug,46,1104
  ter_wall,47,1117
  ter_wall_immutable,48,1129
  ter_floor,49,1151
  ter_floor_room,50,1164
  ter_floor_hall,51,1182
  ter_stairs,52,1200
  ter_stairs_up,53,1214
  ter_stairs_down54,1231
} terrain_type_t;55,1249
typedef struct room 57,1268
  pair_t position;58,1290
  pair_t size;59,1309
} room_t;60,1324
typedef struct stair{stair62,1335
  pair_t position;63,1357
  int up_down;65,1393
}stair_t;stair_t66,1408
typedef struct monster_path 68,1419
    heap_node_t *hn;hn69,1449
    uint8_t pos[pos70,1470
    int32_t cost;71,1490
} monster_path_t;72,1508
typedef struct character 74,1527
    pc_t *pc;pc75,1554
    monster_t *monster;monster76,1568
    uint32_t turn;77,1592
    uint32_t sd;78,1611
    heap_node_t *hn;hn79,1628
    char display_char;80,1649
    int living;81,1672
    int8_t x,82,1688
    int8_t x,y;82,1688
}character_t;character_t83,1704
typedef struct dungeon 86,1720
  uint32_t num_rooms;87,1745
  room_t *rooms;rooms88,1767
  character_t *characters;characters89,1784
  stair_t stairs[stairs90,1811
  terrain_type_t map[map91,1834
  character_t *character_map[character_map92,1878
  uint8_t hardness[hardness101,2503
  uint16_t stairs_up;102,2545
  uint16_t stairs_down;103,2567
  pc_t pc;104,2591
  int num_monsters;105,2602
  monster_path_t non_tun_path[non_tun_path106,2622
  monster_path_t tun_path[tun_path107,2675
} dungeon_t;108,2724

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

monster.c,194
static int32_t monster_path_cmp(9,121
char get_display_char(12,269
void dijkstra_non_tunneling(36,938
void dijkstra_tunneling(94,2522
void move_monster(153,4390
int bresenham_LOS(252,7614

monster.h,364
# define MONSTER_H2,18
typedef struct monster 6,60
    int intelligent;13,483
    int telepath;20,917
    int tunneling;29,1505
    int erratic;35,1758
    int speed;36,1775
    int x;37,1790
    int y;38,1801
    pair_t pc_last_loc;39,1812
} monster_t;41,1837
typedef struct dif{dif43,1851
    int x;44,1871
    int y;45,1882
}dif_t;dif_t46,1893

game.c,0
