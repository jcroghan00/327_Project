
dungeon.c,2740
# define rand_under(16,339
# define rand_range(20,482
# define UNUSED(21,555
#define malloc(23,586
typedef struct file_info 29,725
  char file_type[file_type30,752
  uint32_t version;31,774
  uint32_t file_size;32,794
} file_info_t;33,816
 struct pc 35,832
  int8_t x,36,845
  int8_t x, y;36,845
} pc;37,860
typedef struct corridor_path 40,868
  heap_node_t *hn;hn41,899
  uint8_t pos[pos42,918
  uint8_t from[from43,936
  int32_t cost;44,955
} corridor_path_t;45,971
typedef enum dim 47,991
  dim_x,48,1010
  dim_y,49,1019
  num_dims50,1028
} dim_t;51,1039
typedef int16_t pair_t[pair_t53,1049
#define DUNGEON_X 55,1084
#define DUNGEON_Y 56,1118
#define MIN_ROOMS 57,1152
#define MAX_ROOMS 58,1185
#define ROOM_MIN_X 59,1219
#define ROOM_MIN_Y 60,1252
#define ROOM_MAX_X 61,1285
#define ROOM_MAX_Y 62,1319
#define mappair(64,1354
#define mapxy(65,1411
#define hardnesspair(66,1446
#define hardnessxy(67,1513
typedef enum __attribute__ ((__packed__)) terrain_type 69,1559
  ter_debug,70,1616
  ter_wall,71,1629
  ter_wall_immutable,72,1641
  ter_floor,73,1663
  ter_floor_room,74,1676
  ter_floor_hall,75,1694
  ter_stairs,76,1712
  ter_stairs_up,77,1726
  ter_stairs_down,78,1743
  ter_pc79,1762
} terrain_type_t;80,1771
typedef struct room 82,1790
  pair_t position;83,1812
  pair_t size;84,1831
} room_t;85,1846
typedef struct stair{stair86,1856
  pair_t position;87,1878
  int up_down;89,1914
}stair_t;stair_t90,1929
typedef struct dungeon 92,1940
  uint32_t num_rooms;93,1965
  room_t rooms[rooms94,1987
  stair_t stairs[stairs95,2014
  terrain_type_t map[map96,2037
  uint8_t hardness[hardness105,2690
  uint16_t stairs_up;106,2732
  uint16_t stairs_down;107,2754
} dungeon_t;108,2778
static uint32_t in_room(110,2792
static uint32_t adjacent_to_room(126,3183
static uint32_t is_open_space(134,3444
static int32_t corridor_path_cmp(139,3543
static void dijkstra_corridor(143,3693
static void dijkstra_corridor_inv(242,7430
#define hardnesspair_inv(295,8752
static int connect_two_rooms(345,11423
static int create_cycle(364,12075
static int connect_rooms(406,13640
int gaussian[gaussian419,13833
typedef struct queue_node 427,13989
  int x,428,14017
  int x, y;428,14017
  struct queue_node *next;next429,14029
} queue_node_t;430,14056
static int smooth_hardness(432,14073
static int empty_dungeon(586,18247
static int place_rooms(605,18623
static void place_stairs(642,19810
static int make_rooms(678,20792
static void place_pc(703,21378
int gen_dungeon(717,21608
int load_dungeon(731,21785
void render_dungeon(828,23726
void delete_dungeon(867,24533
void init_dungeon(871,24572
int save_dungeon(876,24629
int main(965,26973

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

game.c,0
