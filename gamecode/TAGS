
dungeon.c,1759
# define rand_under(8,175
# define rand_range(12,318
# define UNUSED(13,391
#define malloc(15,422
typedef struct file_info 21,561
  char file_type[file_type22,588
  uint32_t version;23,610
  uint32_t file_size;24,630
} file_info_t;25,652
typedef struct character 27,668
    pc_t *pc;pc28,695
    monster_t *monster;monster29,709
    uint32_t turn;30,733
    uint32_t sd;31,752
    heap_node_t *hn;hn32,769
}character_t;character_t33,790
character_t *characters;characters34,804
static int32_t character_cmp(36,830
typedef struct corridor_path 46,1138
  heap_node_t *hn;hn47,1169
  uint8_t pos[pos48,1188
  uint8_t from[from49,1206
  int32_t cost;50,1225
} corridor_path_t;51,1241
static uint32_t in_room(54,1299
static uint32_t adjacent_to_room(70,1690
static uint32_t is_open_space(78,1951
static int32_t corridor_path_cmp(83,2050
static void dijkstra_corridor(87,2200
static void dijkstra_corridor_inv(186,5937
#define hardnesspair_inv(239,7259
static int connect_two_rooms(289,9930
static int create_cycle(308,10582
static int connect_rooms(350,12147
int gaussian[gaussian363,12340
typedef struct queue_node 371,12496
  int x,372,12524
  int x, y;372,12524
  struct queue_node *next;next373,12536
} queue_node_t;374,12563
static int smooth_hardness(376,12580
static int empty_dungeon(530,16754
static int place_rooms(548,17129
static void place_stairs(585,18316
static int make_rooms(627,19386
static void place_pc(650,19947
int gen_monsters(671,20731
int gen_dungeon(727,22645
int load_dungeon(743,22894
void render_dungeon(864,25656
void delete_dungeon(948,27937
void init_dungeon(954,28019
int save_dungeon(959,28076
void move_pc(1035,30050
int play_game(1060,30647
int main(1104,31836

dungeon.h,1855
# define DUNGEON_H2,18
 typedef struct monster monster_t;16,282
 typedef struct pc 18,318
  int8_t x,19,339
  int8_t x, y;19,339
  int living;20,354
}pc_t;pc_t21,368
typedef enum dim 23,376
  dim_x,24,395
  dim_y,25,404
  num_dims26,413
} dim_t;27,424
typedef int16_t pair_t[pair_t29,434
#define DUNGEON_X 31,469
#define DUNGEON_Y 32,503
#define MIN_ROOMS 33,537
#define MAX_ROOMS 34,570
#define ROOM_MIN_X 35,604
#define ROOM_MIN_Y 36,637
#define ROOM_MAX_X 37,670
#define ROOM_MAX_Y 38,704
#define mappair(40,739
#define mapxy(41,796
#define hardnesspair(42,831
#define hardnessxy(43,898
#define monster_mappair(44,943
#define monster_mapxy(45,1016
typedef enum __attribute__ ((__packed__)) terrain_type 47,1068
  ter_debug,48,1125
  ter_wall,49,1138
  ter_wall_immutable,50,1150
  ter_floor,51,1172
  ter_floor_room,52,1185
  ter_floor_hall,53,1203
  ter_stairs,54,1221
  ter_stairs_up,55,1235
  ter_stairs_down56,1252
} terrain_type_t;57,1270
typedef struct room 59,1289
  pair_t position;60,1311
  pair_t size;61,1330
} room_t;62,1345
typedef struct stair{stair64,1356
  pair_t position;65,1378
  int up_down;67,1414
}stair_t;stair_t68,1429
typedef struct monster_path 70,1440
    heap_node_t *hn;hn71,1470
    uint8_t pos[pos72,1491
    int32_t cost;73,1511
} monster_path_t;74,1529
typedef struct dungeon 76,1548
  uint32_t num_rooms;77,1573
  room_t *rooms;rooms78,1595
  monster_t *monsters;monsters79,1612
  stair_t stairs[stairs80,1635
  terrain_type_t map[map81,1658
  monster_t *monster_map[monster_map82,1702
  uint8_t hardness[hardness91,2323
  uint16_t stairs_up;92,2365
  uint16_t stairs_down;93,2387
  pc_t pc;94,2411
  int num_monsters;95,2422
  monster_path_t non_tun_path[non_tun_path96,2442
  monster_path_t tun_path[tun_path97,2495
} dungeon_t;98,2544

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

monster.c,280
static int32_t monster_path_cmp(9,121
char get_display_char(12,269
void dijkstra_non_tunneling(36,905
void dijkstra_tunneling(94,2467
    void move_line(154,4314
void final_move(188,5254
void move_monster(205,5705
int bresenham_LOS(326,9806
void bresenham_move(361,10471

monster.h,439
# define MONSTER_H2,18
typedef struct monster 6,60
    int intelligent;13,483
    int telepath;20,917
    int tunneling;29,1505
    int erratic;35,1758
    int speed;36,1775
    int pc;37,1790
    int x;38,1802
    int y;39,1813
    int living;40,1824
    pair_t pc_last_loc;41,1840
    char display_char;42,1864
} monster_t;44,1888
typedef struct dif{dif46,1902
    int x;47,1922
    int y;48,1933
}dif_t;dif_t49,1944

rlg327.c,0

game.c,0
