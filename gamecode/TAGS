
dungeon.c,1648
# define rand_under(8,192
# define rand_range(12,335
# define UNUSED(13,408
#define malloc(15,439
typedef struct character 21,578
    pc_t *pc;pc22,605
    monster_t *monster;monster23,619
    uint32_t turn;24,643
    uint32_t sd;25,662
    heap_node_t *hn;hn26,679
}character_t;character_t27,700
character_t *characters;characters28,714
static int32_t character_cmp(30,740
typedef struct corridor_path 39,1047
  heap_node_t *hn;hn40,1078
  uint8_t pos[pos41,1097
  uint8_t from[from42,1115
  int32_t cost;43,1134
} corridor_path_t;44,1150
static uint32_t in_room(47,1208
static uint32_t adjacent_to_room(63,1599
static uint32_t is_open_space(71,1860
static int32_t corridor_path_cmp(76,1959
static void dijkstra_corridor(80,2109
static void dijkstra_corridor_inv(179,5846
#define hardnesspair_inv(232,7168
static int connect_two_rooms(282,9839
static int create_cycle(301,10491
static int connect_rooms(343,12056
int gaussian[gaussian356,12249
typedef struct queue_node 364,12405
  int x,365,12433
  int x, y;365,12433
  struct queue_node *next;next366,12445
} queue_node_t;367,12472
static int smooth_hardness(369,12489
static int empty_dungeon(523,16663
static int place_rooms(541,17038
static void place_stairs(578,18225
static int make_rooms(620,19295
static void place_pc(643,19856
int gen_monsters(664,20640
int gen_dungeon(720,22554
int load_dungeon(734,22749
void render_dungeon(855,25535
void delete_dungeon(938,27799
void init_dungeon(944,27881
uint32_t calc_file_size(949,27938
int save_dungeon(955,28089
void move_pc(1033,30063
int play_game(1058,30660
int main(1107,31947

dungeon.h,1979
# define DUNGEON_H2,18
#define DUNGEON_X 18,284
#define DUNGEON_Y 19,318
#define MIN_ROOMS 20,352
#define MAX_ROOMS 21,385
#define ROOM_MIN_X 22,419
#define ROOM_MIN_Y 23,452
#define ROOM_MAX_X 24,485
#define ROOM_MAX_Y 25,519
#define SEMANTIC_FILE_MARKER 26,553
#define SAVE_DIR 27,599
#define SAVE_FILE 28,640
#define FILE_VERSION 29,681
 typedef struct monster monster_t;31,715
 typedef struct pc 33,751
  int8_t x,34,772
  int8_t x, y;34,772
  int living;35,787
}pc_t;pc_t36,801
typedef enum dim 38,809
  dim_x,39,828
  dim_y,40,837
  num_dims41,846
} dim_t;42,857
typedef int16_t pair_t[pair_t44,867
#define mappair(46,902
#define mapxy(47,959
#define hardnesspair(48,994
#define hardnessxy(49,1061
#define monster_mappair(50,1106
#define monster_mapxy(51,1179
typedef enum __attribute__ ((__packed__)) terrain_type 53,1231
  ter_debug,54,1288
  ter_wall,55,1301
  ter_wall_immutable,56,1313
  ter_floor,57,1335
  ter_floor_room,58,1348
  ter_floor_hall,59,1366
  ter_stairs,60,1384
  ter_stairs_up,61,1398
  ter_stairs_down62,1415
} terrain_type_t;63,1433
typedef struct room 65,1452
  pair_t position;66,1474
  pair_t size;67,1493
} room_t;68,1508
typedef struct stair{stair70,1519
  pair_t position;71,1541
  int up_down;73,1577
}stair_t;stair_t74,1592
typedef struct monster_path 76,1603
    heap_node_t *hn;hn77,1633
    uint8_t pos[pos78,1654
    int32_t cost;79,1674
} monster_path_t;80,1692
typedef struct dungeon 82,1711
  uint32_t num_rooms;83,1736
  room_t *rooms;rooms84,1758
  monster_t *monsters;monsters85,1775
  stair_t stairs[stairs86,1798
  terrain_type_t map[map87,1821
  monster_t *monster_map[monster_map88,1865
  uint8_t hardness[hardness97,2486
  uint16_t stairs_up;98,2528
  uint16_t stairs_down;99,2550
  pc_t pc;100,2574
  int num_monsters;101,2585
  monster_path_t non_tun_path[non_tun_path102,2605
  monster_path_t tun_path[tun_path103,2658
} dungeon_t;104,2707

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

monster.c,162
char get_display_char(9,121
void move_line(33,757
void final_move(66,1580
void move_monster(83,2031
int bresenham_LOS(203,6131
void bresenham_move(238,6796

monster.h,439
# define MONSTER_H2,18
typedef struct monster 6,60
    int intelligent;13,483
    int telepath;20,917
    int tunneling;29,1505
    int erratic;35,1758
    int speed;36,1775
    int pc;37,1790
    int x;38,1802
    int y;39,1813
    int living;40,1824
    pair_t pc_last_loc;41,1840
    char display_char;42,1864
} monster_t;44,1888
typedef struct dif{dif46,1902
    int x;47,1922
    int y;48,1933
}dif_t;dif_t49,1944

path.c,106
static int32_t monster_path_cmp(5,58
void dijkstra_non_tunneling(9,207
void dijkstra_tunneling(67,1882

path.h,21
# define PATH_H2,15

rlg327.c,0

game.c,0
